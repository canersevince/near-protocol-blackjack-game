#!/usr/bin/env node

const yargs = require('yargs')
const sh = require('shelljs')
const path = require('path')

const calledFromDir = sh.pwd().toString()

sh.fatal = true // same as "set -e"
sh.cd(__dirname)

const { debug, verbose } = yargs
  .strict()
  .usage('$0 [--debug] [-v]', 'compile smart contract')
  .option('debug', {
    desc: 'include debug info in compiled WASM',
    type: 'boolean',
    default: false,
  })
  .option('verbose', {
    desc: 'log debug info',
    type: 'boolean',
    default: false,
    alias: 'v'
  })
  .version(false)
  .argv

if (verbose) console.log('##### Compiling smart contract #####')

// Note: see flags in ./cargo/config
const buildCmd = debug
  ? 'npx asb --verbose --target debug'
  : 'npx asb --verbose'
const outFile = `./build/${debug ? 'debug' : 'release'}/greeter.wasm`

if (verbose) console.log(`  build command:    ${buildCmd}`)
if (verbose) console.log(`  output file: ${path.resolve(outFile)}`)

if (verbose) console.log('  Installing dependencies')
sh.exec('npm install --legacy-peer-deps')

sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder â€“
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  const linkPath = path.relative(linkDir, outFile)

  if (verbose) console.log(`  linking to:   ${link}`)
  if (verbose) console.log(`  symlink path: ${linkPath}`)

  sh.ln('-s', linkPath, link)

  if (verbose) console.log(`    ${sh.ls('-l', link)[0]}`)
}

if (verbose) console.log('#####           Done!          #####')
